name: Import Resources into Terraform State (Prod)

on:
  workflow_dispatch:

jobs:
  import:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.9

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        client-id: ${{ secrets.ARM_CLIENT_ID }}
        tenant-id: ${{ secrets.ARM_TENANT_ID }}
        subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

        
    - name: Terraform Init
      run: terraform init
      working-directory: ./prod

    - name: Import Resources
      run: |
        resources=$(cat state_list.txt)
        for resource in $resources; do
          case $resource in
            "vnet")
              terraform import 'module.network.azurerm_virtual_network.main' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/virtualNetworks/ProdLongReportVNet'
              ;;
            "nsg")
              terraform import 'module.network.azurerm_network_security_group.main' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/networkSecurityGroups/ProdLongReportNSG'
              ;;
            "backend_public_ip")
              terraform import 'module.backend_compute.azurerm_public_ip.public_ip' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/publicIPAddresses/ProdLongReportBackendPublicIP'
              ;;
            "cms_public_ip")
              terraform import 'module.cms_compute.azurerm_public_ip.public_ip' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/publicIPAddresses/ProdLongReportCMSPublicIP'
              ;;
            "frontend_public_ip")
              terraform import 'module.frontend_compute.azurerm_public_ip.public_ip' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/publicIPAddresses/ProdLongReportFrontendPublicIP'
              ;;
            "backend_vm")
              terraform import 'module.backend_compute.azurerm_virtual_machine.vm' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Compute/virtualMachines/ProdLongReportBackendVM'
              ;;
            "cms_vm")
              terraform import 'module.cms_compute.azurerm_virtual_machine.vm' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Compute/virtualMachines/ProdLongReportCMSVM'
              ;;
            "frontend_vm")
              terraform import 'module.frontend_compute.azurerm_virtual_machine.vm' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Compute/virtualMachines/ProdLongReportFrontendVM'
              ;;
            "backend_nic")
              terraform import 'module.backend_compute.azurerm_network_interface.vm_nic' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/networkInterfaces/ProdLongReportBackendNIC'
              ;;
            "cms_nic")
              terraform import 'module.cms_compute.azurerm_network_interface.vm_nic' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/networkInterfaces/ProdLongReportCMSNIC'
              ;;
            "frontend_nic")
              terraform import 'module.frontend_compute.azurerm_network_interface.vm_nic' '/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/QZNC-TLR-RG/providers/Microsoft.Network/networkInterfaces/ProdLongReportFrontendNIC'
              ;;
          esac
        done
      working-directory: ./prod

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./prod
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        TF_VAR_admin_username: ${{ secrets.TF_VAR_admin_username }}
        TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}
